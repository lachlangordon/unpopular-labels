/*
 * MIXINS
 * ========================================================================== */

/*
 * #GRADIENT-BG
 * Create a hard background gradient in classic MAAS style
 * ========================================================================== */

/*
@define-mixin gradient-bg $colour1, $pos1, $colour2, $pos2 {
  background-color: $colour1;
  background-image:
    linear-gradient(
      110deg,
      $colour1 $pos1,
      $colour2 $pos2
    );
}*/


/*
 * ADDITIONAL MIXINS
 * ========================================================================== */

/*
 * #VENDOR
 * Vendorizes a declaration's property and/or value(s).
 * ========================================================================== */

/// Vendor prefixes.
/// @var {list}
$vendor-prefixes: (
  '-moz-',
  '-webkit-',
  '-ms-',
  ''
);

/// Properties that should be vendorized.
/// @var {list}
$vendor-properties: (
  'align-content',
  'align-items',
  'align-self',
  'animation',
  'animation-delay',
  'animation-direction',
  'animation-duration',
  'animation-fill-mode',
  'animation-iteration-count',
  'animation-name',
  'animation-play-state',
  'animation-timing-function',
  'appearance',
  'backface-visibility',
  'box-sizing',
  'filter',
  'flex',
  'flex-basis',
  'flex-direction',
  'flex-flow',
  'flex-grow',
  'flex-shrink',
  'flex-wrap',
  'justify-content',
  'object-fit',
  'object-position',
  'order',
  'perspective',
  'pointer-events',
  'transform',
  'transform-origin',
  'transform-style',
  'transition',
  'transition-delay',
  'transition-duration',
  'transition-property',
  'transition-timing-function',
  'user-select'
);

/// Values that should be vendorized.
/// @var {list}
$vendor-values: (
  'filter',
  'flex',
  'linear-gradient',
  'radial-gradient',
  'transform'
);

/// @param {string} $property Property.
/// @param {mixed} $value String/list of value(s).
@mixin vendor($property, $value) {

  // Determine if property should expand.
    $expandProperty: index($vendor-properties, $property);

  // Determine if value should expand (and if so, add '-prefix-' placeholder).
    $expandValue: false;

    @each $x in $value {
      @each $y in $vendor-values {
        @if $y == str-slice($x, 1, str-length($y)) {

          $value: set-nth($value, index($value, $x), '-prefix-' + $x);
          $expandValue: true;

        }
      }
    }

  // Expand property?
    @if $expandProperty {
      @each $vendor in $vendor-prefixes {
          #{$vendor}#{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
      }
    }

  // Expand just the value?
    @elseif $expandValue {
      @each $vendor in $vendor-prefixes {
          #{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
      }
    }

  // Neither? Treat them as a normal declaration.
    @else {
        #{$property}: #{$value};
    }

}

/*
 * #ICON
 * Makes an element's :before pseudoelement a FontAwesome icon.
 * ========================================================================== */
 // @param {string} $content Optional content value to use.
 // @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $where: before) {
	text-decoration: none;

	&:#{$where} {

		@if $content {
			content: $content;
		}

		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
		font-family: FontAwesome;
		font-style: normal;
		font-weight: normal;
		text-transform: none !important;
	}
}

/*
 * #SVG-URL
 * Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
 * ========================================================================== */
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {

	$svg: str-replace($svg, '"', '\'');
	$svg: str-replace($svg, '%', '%25');
	$svg: str-replace($svg, '<', '%3C');
	$svg: str-replace($svg, '>', '%3E');
	$svg: str-replace($svg, '&', '%26');
	$svg: str-replace($svg, '#', '%23');
	$svg: str-replace($svg, '{', '%7B');
	$svg: str-replace($svg, '}', '%7D');
	$svg: str-replace($svg, ';', '%3B');

	@return url("data:image/svg+xml;charset=utf8,#{$svg}");
}
